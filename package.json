{
  "name": "dmarc-analyzer",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "docker:compose:build": "docker-compose build",
    "docker:compose:up": "docker-compose up",
    "docker:compose:down": "docker-compose down",
    "docker:build": "npx npm-run-all --parallel docker:build:frontend docker:build:backend",
    "docker:build:frontend": "cd frontend && npm run docker:build",
    "docker:build:backend": "cd backend && npm run docker:build",
    "docker:frontend": "cd frontend && npm run docker:run",
    "docker:backend": "cd backend && npm run docker:run",
    "docker:clean": "docker-compose down -v --rmi all",
    "docker:test": "npx npm-run-all docker:test:frontend docker:test:backend",
    "docker:test:frontend": "cd frontend && npm run docker:test",
    "docker:test:backend": "cd backend && npm run docker:test",
    "dev": "scripts/run-with-pg-dev.sh npx npm-run-all dev:setup dev:both",
    "dev:setup": "npm run db:up && npm run prisma:migrate",
    "dev:both": "npx npm-run-all --parallel dev:frontend dev:backend",
    "dev:frontend": "cd frontend && npm run dev",
    "dev:backend": "cd backend && npm run dev",
    "build": "npx npm-run-all --parallel build:frontend build:backend",
    "build:frontend": "cd frontend && npm run build",
    "build:backend": "cd backend && npm run build",
    "test": "npx npm-run-all test:backend test:frontend",
    "test:postgres": "./scripts/run-with-pg-test.sh npm run test",
    "test:mocked": "MOCK_DB=true npm run test",
    "test:unit": "npx npm-run-all test:unit:backend test:unit:frontend",
    "test:e2e": "npx npm-run-all test:e2e:backend test:e2e:frontend",
    "test:e2e-mocked": "MOCK_DB=true npm run test:e2e",
    "test:e2e-postgres": "./scripts/run-with-pg-test.sh npm run test:e2e",
    "test:frontend": "cd frontend && npm run test",
    "test:unit:frontend": "cd frontend && npm run test:unit",
    "test:e2e:frontend": "cd frontend && npm run test:e2e",
    "test:backend": "cd backend && npm run test",
    "test:unit:backend": "cd backend && npm run test:unit",
    "test:mocked:backend": "MOCK_DB=true npm run test:backend",
    "test:e2e:backend": "cd backend && npm run test:e2e",
    "test:e2e-mocked:backend": "MOCK_DB=true npm run test:e2e:backend",
    "test:e2e-postgres:backend": "./scripts/run-with-pg-test.sh npm run test:e2e:backend",
    "test:ci": "npx npm-run-all test:ci:backend test:ci:frontend",
    "test:ci:frontend": "cd frontend && npm run test:ci",
    "test:ci:backend": "cd backend && npm run test:ci",
    "test:ci:mocked": "MOCK_DB=true npm run test:ci",
    "test:ci:postgres": "./scripts/run-with-pg-test.sh npm run test:ci",
    "lint": "npx npm-run-all --parallel lint:frontend lint:backend",
    "lint:frontend": "cd frontend && npm run lint",
    "lint:backend": "cd backend && npm run lint",
    "format": "npx npm-run-all --parallel format:frontend format:backend",
    "format:frontend": "cd frontend && npm run format",
    "format:backend": "cd backend && npm run format",
    "install": "npx npm-run-all --parallel install:frontend install:backend",
    "install:frontend": "cd frontend && npm install",
    "install:backend": "cd backend && npm install",
    "ci": "npx npm-run-all ci:backend ci:frontend",
    "ci:frontend": "cd frontend && npm ci",
    "ci:backend": "cd backend && npm ci",
    "audit": "npx npm-run-all --parallel audit:frontend audit:backend",
    "audit:frontend": "cd frontend && npm audit",
    "audit:backend": "cd backend && npm audit",
    "audit:fix": "npx npm-run-all --parallel audit:fix:frontend audit:fix:backend",
    "audit:fix:frontend": "cd frontend && npm audit fix",
    "audit:fix:backend": "cd backend && npm audit fix",
    "prisma:generate": "npx prisma@6.3.1 generate",
    "prisma:push": "npx prisma@6.3.1 db push",
    "prisma:migrate": "npx prisma@6.3.1 migrate dev",
    "prisma:studio": "npx prisma@6.3.1 studio",
    "db:up": "docker compose -f docker-compose.dev.yml up -d",
    "db:down": "docker compose -f docker-compose.dev.yml down",
    "db:reset": "docker compose -f docker-compose.dev.yml down -v && docker compose -f docker-compose.dev.yml up -d"
  },
  "engines": {
    "node": ">=20.0.0",
    "npm": ">=10.0.0",
    "bun": ">=1.2.0",
    "deno": ">=2.1.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/femfirefem/dmarc-analyzer.git"
  },
  "keywords": [
    "dmarc",
    "email",
    "security",
    "analysis"
  ],
  "author": "femfirefem",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/femfirefem/dmarc-analyzer/issues"
  },
  "homepage": "https://github.com/femfirefem/dmarc-analyzer#readme",
  "devDependencies": {
    "prisma": "^6.3.1"
  },
  "dependencies": {
    "@prisma/client": "^6.3.1"
  }
}
