datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["deno"]
}

enum AlignmentMode {
  RELAXED  @map("r")
  STRICT   @map("s")
}

enum PolicyType {
  NONE
  QUARANTINE
  REJECT
}

enum FailureReporting {
  ZERO  @map("0")
  ONE   @map("1")
  D     @map("d")
  S     @map("s")
}

enum AuthResult {
  PASS
  FAIL
}

model DmarcReport {
  id            String   @id @default(uuid())
  mailDate      DateTime // When the email was sent
  processedDate DateTime @default(now()) // When we processed the report
  
  // Report Metadata
  reportId      String
  orgName       String
  orgEmail      String?
  beginDate     DateTime
  endDate       DateTime
  
  // Policy Published
  domain            String
  adkim             AlignmentMode?
  aspf              AlignmentMode?
  policy            PolicyType
  subdomainPolicy   PolicyType?
  percentage        Int?
  failureReporting  FailureReporting?

  // Reporter
  reporter      KnownReporter?   @relation("ReporterToReport", fields: [reporterId], references: [id])
  reporterId    String?

  // Relationships
  records          Record[]

  @@unique([reportId, orgName])
  @@index([reporterId])
}

model Record {
  id            String   @id @default(uuid())
  
  // Source IP Info
  sourceIp      String
  count         Int
  
  // Policy Evaluated
  disposition   PolicyType
  dkim         AuthResult
  spf          AuthResult
  
  // Identifiers
  headerFrom    String
  
  // DKIM Authentication
  dkimDomain   String?
  dkimResult   AuthResult?
  dkimSelector String?
  
  // SPF Authentication
  spfDomain    String?
  spfResult    AuthResult?
  
  // Relationships
  report       DmarcReport @relation(fields: [reportId], references: [id])
  reportId     String

  @@index([sourceIp])
  @@index([headerFrom])
}

enum ReporterTrustLevel {
  UNTRUSTED
  LOW
  MEDIUM
  HIGH
  VERIFIED
}

enum ReporterStatus {
  ACTIVE
  BLOCKED
  PENDING_REVIEW
}

model KnownReporter {
  id            String           @id @default(cuid())
  orgEmail      String           @unique
  orgName       String
  firstSeen     DateTime         @default(now())
  lastSeen      DateTime         @updatedAt
  trustLevel    ReporterTrustLevel @default(UNTRUSTED)
  status        ReporterStatus   @default(PENDING_REVIEW)
  notes         String?
  reports       DmarcReport[]    @relation("ReporterToReport")
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@index([orgEmail])
  @@index([status, trustLevel])
}
