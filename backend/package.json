{
    "name": "dmarc-analyzer-backend",
    "version": "0.0.1",
    "private": true,
    "scripts": {
        "dev": "deno run --allow-net --allow-sys --allow-env --allow-read --allow-ffi --watch src/main.ts --smtpPort 52525",
        "test": "deno test --allow-net --allow-sys --allow-env --allow-read --allow-ffi",
        "test:mocked": "MOCK_DB=true npm run test",
        "test:postgres": "../scripts/run-with-postgres.sh npm run test",
        "test:unit": "MOCK_DB=true deno test --allow-net --allow-sys --allow-env --allow-read --allow-ffi 'src/**/*.unit.test.*'",
        "test:e2e": "deno test --allow-net --allow-sys --allow-env --allow-read --allow-ffi 'src/**/*.e2e.test.*'",
        "test:e2e-mocked": "MOCK_DB=true npm run test:e2e",
        "test:e2e-postgres": "../scripts/run-with-postgres.sh npm run test:e2e",
        "test:watch": "deno test --allow-net --allow-sys --allow-env --allow-read --allow-ffi --watch",
        "test:watch:mocked": "MOCK_DB=true npm run test:watch",
        "test:watch:postgres": "../scripts/run-with-postgres.sh npm run test:watch",
        "test:ci": "deno test --allow-net --allow-sys --allow-env --allow-read --allow-ffi --junit-path=backend-test-results.xml",
        "test:ci:mocked": "MOCK_DB=true npm run test:ci",
        "test:ci:postgres": "../scripts/run-with-postgres.sh npm run test:ci",
        "lint": "deno lint",
        "format": "deno fmt",
        "build": "deno compile --output dmarc-analyzer --allow-net --allow-sys --allow-env --allow-read --allow-ffi src/main.ts",
        "start": "deno run src/main.ts",
        "install": "npm run deno:install && npm run prisma:generate",
        "deno:install": "deno install --allow-scripts=npm:@prisma/client@6.3.1",
        "deno:cache": "deno cache src/main.ts src/**/*test*.ts",
        "prisma:generate": "npx prisma generate",
        "prisma:migrate": "npx prisma migrate dev",
        "prisma:studio": "npx prisma studio",
        "docker:run": "docker run -it --rm -p 3000:3000 -p 25:25 $(docker build -q -f Dockerfile ..)",
        "docker:compile": "docker build --target compile -f Dockerfile ..",
        "docker:test:unit": "docker run -t --rm $(docker build --target unit-test -q -f Dockerfile ..)",
        "docker:test:e2e": "docker run -t --rm $(docker build --target e2e-test -q -f Dockerfile ..)",
        "docker:test": "npm run docker:test:unit && npm run docker:test:e2e"
    }
}
